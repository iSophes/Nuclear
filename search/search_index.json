{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Scroll down for a quick look at three main features."},{"location":"#frameworks-better","title":"Frameworks. Better","text":"<p> Frameworks are designed to help, but end up with a load of unneccessary bloat which makes your life a lot harder.  </p> <p> Nuclear fixes that. </p> <p> It's just a boostrapper, and it's all frameworks really should be. Frameworks like Knit come with utilities that increase the framework's size and also some cannot be removed as they are a core part of the framework. </p>"},{"location":"#rapid-loading","title":"Rapid Loading","text":"<p>Nuclear doesn't faff about with creating services, controllers, making new objects. It just loads your code and lets the code run.</p>"},{"location":"#accessibility","title":"Accessibility","text":"<p>Newer programmers tend to use multiple scripts and localscripts for their code. This is generally a bad idea and Nuclear makes it easy for Newer Programmers to convert to Single-Script architecture.</p>"},{"location":"#not-tied-down","title":"Not tied down","text":"<p>Some frameworks force you to have modules that you may not want. Nuclear removes this faff together by not coming with modules to create an ultra-lightweight bootstrapper and make it much easier to add and remove what you want.</p>"},{"location":"#sparked-your-curiosity","title":"Sparked your curiosity?","text":"<p>These are only three of the benefits of using Nuclear. They're our basic main foundations for development and how we aim to create a future of well-written, robust code which isn't infested with slow and buggy tools powering the framework.</p> <p>If you want to learn more, our user friendly and consise tutorials  with examples and code, will surely help you out!   </p>"},{"location":"tutorials/","title":"Getting Started","text":"<p>Welcome, thank you for trying Nuclear! Here, you will learn all things about Nuclear and what it entails. It's dead easy, so all newcomers are welcome!</p>"},{"location":"tutorials/#expectations","title":"Expectations","text":"<p>Firstly, lets set some ground rules.</p> <ul> <li>You should be somewhat familiar with the luau scripting language.</li> <li>You're familiar with how your desired tooling works. If you're using roblox, be familiar with how to import to roblox.</li> </ul> <p>We don't expect experts here! You should just know the basics.</p>"},{"location":"tutorials/#installation","title":"Installation","text":"<p>There are currently two methods of installing Nuclear, dependent of how you code.</p>"},{"location":"tutorials/#if-you-are-using-roblox-studio","title":"If you are using Roblox Studio","text":"Method 1 Steps (click to expand) <ul> <li>Head over to Our Releases Page</li> <li>Click \"Assets\" to view the downloadable files:</li> <li></li> <li></li> <li>Then, download Nuclear.rbxm and drag and drop it into your workspace.</li> <li>Move your new model into ReplicatedStorage</li> <li>Kaboom! Nuclear is installed!</li> </ul> Method 2 Steps (click to expand) <ul> <li>Head over to The Model and press \"Get\"</li> <li>Once got, navigate to your toolbox and find \"My Models\"</li> <li>Click on \"Nuclear\" and it will be in your Workspace.</li> <li>Drag it into ReplicatedStorage</li> <li>Kaboom! Nuclear is installed!</li> </ul>"},{"location":"tutorials/#if-you-are-using-rojo","title":"If you are using Rojo","text":"Steps (click to expand) <ul> <li> <p>Install Wally by putting the following into your aftman.toml:</p> <ul> <li><code>wally = \"upliftgames/wally@0.3.2\"</code></li> </ul> </li> <li> <p>Save your aftman.toml file and run the following commands to get wally initialised and running!</p> <ul> <li><code>aftman install</code></li> <li><code>wally init</code></li> </ul> </li> <li> <p>Put the following into your newly created wally.toml file.</p> <ul> <li><code>nuclear = isophes/nuclear@0.1.0</code></li> </ul> </li> <li> <p>Run the following command and wally will automatically install Nuclear for you to use!</p> <ul> <li><code>wally install</code></li> </ul> </li> <li> <p>Kaboom! Nuclear is installed!</p> </li> </ul>"},{"location":"tutorials/#need-help","title":"Need help?","text":"<p>Nuclear is designed for ease of use and if you need any help, there will guaranteed to be someone to help. Just join the Roblox OSS Discord Server and See This Thread and ask away!</p>"},{"location":"tutorials/Using%20The%20Framework/Libraries/","title":"Using Libraries","text":"<p>Nuclear doesn't come with Libraries as it is a simple bootstrapper. However below is a small list of modules that we recommend to make your development life a lot easier!</p>"},{"location":"tutorials/Using%20The%20Framework/Libraries/#list-of-libraries","title":"List of Libraries","text":"<ul> <li> <p>Promise V4.0.0 </p> <pre><code>- Javascript Promise implementation in Lua\n</code></pre> </li> <li> <p>ByteNet V0.3.0</p> <pre><code>- Networking replacement to RemoteEvent and RemoteFunctions and is around 10x-100x faster!\n</code></pre> </li> <li> <p>Trove V1.2.0</p> <pre><code>- Cleanup Module. Simple API.\n</code></pre> </li> <li> <p>Signal V2.0.1</p> <pre><code>- Create your own versions of RBXScriptSignals which you can connect to. Follows the coding pattern Observe the world, don't query it.\n</code></pre> </li> </ul>"},{"location":"tutorials/Using%20The%20Framework/Libraries/#installing-the-modules","title":"Installing the modules","text":"<p>Please see the libraries' respective documentation on how to install the package.</p>"},{"location":"tutorials/Using%20The%20Framework/Loading/","title":"Loading Modules","text":"<p>Nuclear is basically one big module loader. You specify where your code is and it loads them.</p>"},{"location":"tutorials/Using%20The%20Framework/Loading/#why-modules-i-dont-understand","title":"Why Modules? I don't understand!","text":"<p>Modules are basically just normal scripts but with more accessibility! With normal scripts: if you have a function in one script and need to access it from other, well - you cant! They also allow for more complex programming paradigms like OOP. </p>"},{"location":"tutorials/Using%20The%20Framework/Loading/#loading-modules_1","title":"Loading modules","text":"<p>The API Reference is dead simple! Nuclear currently contains just one function: Start</p> <pre><code>Nuclear:Start(Modules: table?)\n</code></pre> <p>You can specify which modules you would like Nuclear to load OR have Nuclear by default run all code in ServerScriptService and StarterPlayerScripts.</p>"},{"location":"tutorials/Using%20The%20Framework/Loading/#the-default","title":"The default","text":"Steps (click to expand) <ul> <li> <p>Put the following code in a SCRIPT and LOCALSCRIPT in SERVERSCRIPTSERVICE and STARTERPLAYERSCRIPTS respectively.</p> <ul> <li> <p>```lua     local Nuclear = require(game:GetService(\"ReplicatedStorage\").Nuclear) -- Change this depending on where you have Nuclear installed.     -- If you are doing it through wally and rojo, it will be in ReplicatedStorage/Modules/Nuclear.</p> <p>Nuclear:Start()</p> </li> </ul> <p>```</p> </li> </ul>"},{"location":"tutorials/Using%20The%20Framework/Loading/#custom-modules","title":"Custom modules","text":"Steps (click to expand) <ul> <li> <p>Your code will look very similar to the default, however you will get a      table with all the modules you may want to require.</p> </li> <li> <p>A way we can do this is the following:</p> <ul> <li> <p>```lua      -- Nuclear require removed for clarity</p> <p>local Modules = {}</p> <p>for _, Module in game.ServerScriptService.Directory:GetChildren() do     if Module.Name == \"$Service\" then         table.insert(Modules, Module)     end end</p> <p>Nuclear:Start(Modules)</p> </li> </ul> <p>```</p> </li> <li> <p>This means that only scripts in the directory, which end in \"Service\" willl be loaded by Nuclear!</p> </li> </ul>"},{"location":"tutorials/Using%20The%20Framework/Starting/","title":"Starting Code","text":"<p>Code in Nuclear is very easy to start and has a very similar syntax to frameworks like Knit.</p> <p>Firstly, your code is normal modulescripts and you don't need to predefine any service name or client tables.</p>"},{"location":"tutorials/Using%20The%20Framework/Starting/#moduleinit","title":"Module:Init","text":"<p>Nuclear allows you to initialise code to be ran before other modules have loaded.</p> <p>This is through the syntax</p> <pre><code>function Module:Init(nil): nil\n\nend\n</code></pre>"},{"location":"tutorials/Using%20The%20Framework/Starting/#modulestart","title":"Module:Start","text":"<p>Nuclear also allows you to start your code with the guarantee that other modules have been loaded.</p> <p>This function has a similar syntax to Module:Init()</p> <pre><code>function Module:Start(nil): nil\n\nend\n</code></pre> <p>No arguments are passed from either function call.</p>"}]}